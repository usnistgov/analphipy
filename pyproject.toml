[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=61.2",
    "setuptools_scm[toml]>=8.0",
]

[project]
name = "analphipy"
description = "Utilities to perform stat mech analysis of pair potentials"
keywords = [
    "analphipy",
]
license = { text = "NIST-PD" }
authors = [{ name = "William P. Krekelberg", email = "wpk@nist.gov" }]
requires-python = ">=3.8,<=3.12"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: Public Domain",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]
dynamic = [
    "readme",
    "version",
]
dependencies = [
    "attrs",
    "docstring-inheritance",
    "module-utilities >= 0.6",
    "numpy",
    "scipy",
    "typing-extensions",
]
[project.optional-dependencies]
dev = [
    "analphipy[nbval]",
    "analphipy[viz]",
    "analphipy[test]",
    "analphipy[typing-extras]",
    "analphipy[dev-extras]",
]
dev-complete = [
    "analphipy[dev]",
    "analphipy[tools]",
]
dev-extras = [
    "ipykernel",
    "ipython",
    "nox",
    "pandas",
    "pytest-accept",
]
docs = [
    "analphipy[viz]",
    "autodocsumm",
    "ghp-import",
    "ipython",
    "myst-nb",
    "pyenchant",
    "sphinx >= 5.3.0",
    "sphinx-autobuild",
    "sphinx-book-theme",
    "sphinx-copybutton",
    "sphinxcontrib-spelling",
]
nbval = [
    "nbval",
]
test = [
    "pandas",
    "pytest",
    "pytest-cov",
    "pytest-sugar",
    "pytest-xdist",
]
tools = [
    "nbqa",
    "pip-tools",
    "pre-commit",
    "pyright",
    "scriv",
]
typing = [
    "analphipy[typing-extras]",
    "pytest",
]
typing-extras = [
    "mypy >= 1.4.1",
    "pandas-stubs",
    "pytype; python_version < '3.11'",
]
viz = [
    "matplotlib",
    "pandas",
]
[project.urls]
Documentation = "https://pages.nist.gov/analphipy/"
Homepage = "https://github.com/usnistgov/analphipy"

[tool.setuptools]
zip-safe = true # if using mypy, must be False
include-package-data = true
license-files = ["LICENSE"]

[tool.setuptools.packages.find]
namespaces = true
where = ["src"]

[tool.setuptools.dynamic]
readme = { file = [
    "README.md",
    "CHANGELOG.md",
    "LICENSE"
], content-type = "text/markdown" }

[tool.setuptools_scm]
fallback_version = "999"

# * Linting --------------------------------------------------------------------

[tool.ruff]
fix = true
line-length = 88
target-version = "py38"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".nox",
    ".venv",
    "venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    # "tests/",
    # "src/analphipy/tests",
]
unsafe-fixes = true

[tool.ruff.lint]
preview = true
select = [
    "F",     # - pyflakes
    "E",     # - pycodestyle
    "W",     # - pycodestyle
    "I",     # - isort
    "UP",    # - pyupgrade
    "D",     # - pydocstyle
    "YTT",   # - flake8-2020
    "B",     # - flake8-bugbear
    "Q",     # - flake8-quotes
    "PLC",   # - pylint
    "PLE",   # - pylint
    "PLR",   # - pylint
    "PLW",   # - pylint
    "PIE",   # - misc lints
    "TID",   # - tidy imports
    "TCH",   # - type-checking imports
    "N",     # - pep8-naming
    "C90",   # - mccabe
    "ANN",   # - flake8-annotation
    "BLE",   # - flake8-blind-except
    "A",     # - flake8-builtins
    "C4",    # - flake8-comprehensions
    "EM",    # - flake8-errmsg
    "FA",    # - flake8-future-annotations
    "ICN",   # - flake8-import-conventions
    "T20",   # - flake8-print
    "PT",    # - flake8-pytest-style
    "RET",   # - flake8-return
    "SIM",   # - flake8-simplify
    "ARG",   # - flake8-unused-arguments
    "PTH",   # - flake8-use-pathlib
    "TD",    # - flake8-todos
    "FIX",   # - flake8-fixme
    "PGH",   # - pygrep-hooks
    "FLY",   # - flynt
    "PERF",  # - Perflint
    "FURB",  # - refurb
    "LOG",   # - flake8-loggin
    "RUF",   # - ruff specific
    # Possibly useful?
    # "G",   # - flake8-logging-format
    # "ERA", # - eradicate
    # "PD",  # - pandas-vet
    # "NPY", # - numpy-specific-rules
    # Overkill
    # "SLF", # - flake8-self
    # These conflict with formatter
    # "COM", # - flake8-commas
    # "ISC", # - flake8-implicit-str-concat

]
# Allow autofix for all enabled rules (when `--fix`) is provided.
# fixable = ["A", "B", "C", "D", "E", "F", "..."]
unfixable = ["TID"]
# Exclude a variety of commonly ignored directories.
ignore = [
    "E402",   # - module level import not at top of file
    "E501",   # - line too long - let black worry about that
    "E731",   # - do not assign a lambda expression, use a def
    "D105",   # - Missing magic method docstring
    "D202",   # - blank line after docstring
    "D205",   # - blank line after summary
    # this leads to errors with placing titles in module
    "D102",   # - Missing docstring in public method
    "D103",   # - Missing docstring in public function
    "D400",   # - First line should end with a period
    "D401",   # - First line of docstring should be in imperative mood: "{first_line}"
    "D415",   # - First line should end with a period, question mark, or exclamation point
    # these are useful, but too many errors with docfiller
    "D107",   # - Missing docstring in __init__
    "D203",   # - 1 blank line required before class docstring
    "D212",   # - Multi-line docstring summary should start at the first line
    "D417",   # - Missing argument description in the docstring for {definition}: {name}
    "TID252", # - Allow relative imports
    # New
    "ANN101",
    "ANN102",
    "ANN401",
    # pylint
    "PLR2004",
    # "PLR0913",
    # "PLR0917",
    "PLC0415", # - import should be at top level (leads to issues with imports in func?)
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pylint]
max-args = 15
max-positional-args = 15
max-public-methods = 30


[tool.ruff.lint.per-file-ignores]
"noxfile.py" = ["RUF009"]
"tools/dataclass_parser.py" = ["A002", "A003"]
"**/base_potential.py" = ["PLR6301", "ARG002"]
"**/norofrenkel.py" = ["N802", "N803", "N806"]
"tests/*.py" = ["D100", "D101", "ANN", "N802", "N806", "PT011"]

[tool.ruff.lint.isort]
known-first-party = ["analphipy"]

[tool.ruff.format]
docstring-code-format = true

[tool.nbqa.addopts]
ruff = ["--fix", "--extend-ignore=D100,B018,ANN001,ANN201"]

# * Testing --------------------------------------------------------------------

[tool.codespell]
exclude-file = "examples/usage/usage.ipynb"

[tool.pytest.ini_options]
addopts = "--doctest-modules --doctest-glob='*.md' --pyargs"
testpaths = ["analphipy", "tests", "README.md"]
# filterwarnings = [
#     "ignore::docstring_inheritance.docstring_inheritors.bases.inheritor.DocstringInheritanceWarning",
# ]

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:", "@overload"]
omit = ["*/vendored/*", "*/_typing.py"]
include = ["src/*"]

[tool.coverage.paths]
source = ["src/", ".nox/**/site-packages/"]

# * Typing ---------------------------------------------------------------------

[tool.mypy]
files = ["src", "tests"]
show_error_codes = true
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
exclude = [".eggs", ".tox", ".nox", ".venv", "docs"]
check_untyped_defs = true
strict = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "scipy.integrate.*",
    "scipy.optimize.*",
    "scipy.misc.*",
    "matplotlib.*",
]

[[tool.mypy.overrides]]
ignore_errors = true
module = []

[tool.pyright]
include = ["src", "tests"]
exclude = ["**/__pycache__", ".tox/**", ".nox/**", ".venv/**", "**/.mypy_cache"]
strict = ["src", "noxfile.py", "tools/*.py"]
pythonVersion = "3.11"
# typeCheckingMode = "strict"
typeCheckingMode = "basic"
# enable subset of "strict"
reportDuplicateImport = true
reportInvalidStubStatement = true
reportOverlappingOverload = true
reportPropertyTypeMismatch = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUnusedImport = true
# disable subset of "basic"
reportGeneralTypeIssues = false
reportMissingModuleSource = false
reportOptionalCall = false
reportOptionalIterable = false
reportOptionalMemberAccess = false
reportOptionalOperand = false
reportOptionalSubscript = false
reportPrivateImportUsage = false
reportUnboundVariable = false

[tool.pytype]
inputs = ["src", "tests"]

# * Dependency creation --------------------------------------------------------

[tool.pyproject2conda]
user_config = "config/userconfig.toml"
template_python = "requirements/py{py}-{env}"
template = "requirements/{env}"
python = ["3.11"]
channels = ["conda-forge"]
style = ["yaml", "requirements"]
default_envs = ["test", "typing", "docs", "dev", "dev-complete"]

[tool.pyproject2conda.dependencies]
pytest-accept = { pip = true }
scriv = { pip = true }

[tool.pyproject2conda.envs.build]
extras = "build-system.requires"
reqs = ["build"]
base = false
style = "requirements"

[tool.pyproject2conda.envs.test-extras]
extras = ["test"]
base = false

[tool.pyproject2conda.envs.test-notebook]
extras = ["test", "nbval", "viz"]

[[tool.pyproject2conda.overrides]]
# Ensure these have pip in yaml file
envs = ["test", "docs", "dev", "dev-complete"]
deps = ["pip"]

[[tool.pyproject2conda.overrides]]
envs = ["test", "typing", "test-extras"]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.pip-tools]
allow-unsafe = true
strip-extras = true

# * Other tools ----------------------------------------------------------------

[tool.scriv]
format = "md"
md_header_level = "2"
new_fragment_template = "file: changelog.d/templates/new_fragment.md.j2"

[tool.commitizen]
use_shortcuts = true

[tool.cruft]
